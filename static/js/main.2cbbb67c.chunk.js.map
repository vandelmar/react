{"version":3,"sources":["logo.svg","components/Members/Member.js","components/Members/Members.js","components/Form/Form.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","member","props","react_default","a","createElement","className","key","id","style","margin","first_name","last_name","onClick","editButtonClick","deleteButtonClick","members","map","Member","form","onSubmit","onSubmitForm","type","name","value","onChange","disabled","buttonDisabled","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","inputOnChangeHandler","event","setState","defineProperty","target","onSubmitHandler","console","log","preventDefault","payload","state","url","formStatus","addMember","editMember","axios","post","then","response","toConsumableArray","push","data","catch","error","put","indexMember","findIndex","memberIdSelected","editButtonHandler","deleteButtonHandler","delete","status","index","splice","_this2","get","_this3","border","Members","Form","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2cbbb67c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\n\r\n// memisahkan card ini menjadi satu component terpisah\r\nconst member = (props) => (\r\n    // mengirimkan {props.member.id} dsb, ke dalam component Member\r\n        <div className=\"col-md-6\" key={props.member.id}>\r\n            <div className=\"card\" style={{ margin: 10 }}>\r\n                <div className=\"card-body\">\r\n                    <h5 className=\"card-title\">{props.member.id}</h5>\r\n                    <h5 className=\"card-title\">{props.member.first_name}</h5>\r\n                    <h5 className=\"card-title\">{props.member.last_name}</h5>\r\n                    {/* kita juga mengirimkan props.editButtonClick dan props.deleteButtonClick \r\n                    ke dalam component Members sebagai event handler tombol edit dan delete. */}\r\n                    <button\r\n                        className=\"btn btn-primary\"\r\n                        onClick={() => props.editButtonClick(props.member)}\r\n                    >Edit</button>\r\n                    <button\r\n                        className=\"btn btn-danger\"\r\n                        onClick={() => props.deleteButtonClick(props.member.id)}\r\n                    >Delete</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n)\r\n\r\nexport default member","import React from 'react'\r\nimport Member from './Member'\r\n\r\n// Terdapat sedikit modifikasi pada kode tersebut, yaitu kode this.state.members \r\n// diganti menjadi props.members karena kita mengirimkan data members melalui props.\r\nconst members = (props) => (\r\n    props.members.map((member) => (\r\n        // memisahkan card ini dibawah menjadi satu component terpisah di file member.js\r\n        // <div className=\"col-md-6\" key={member.id}>\r\n        //     <div className=\"card\" style={{ margin: 10 }}>\r\n        //         <div className=\"card-body\">\r\n        //             <h5 className=\"card-title\">{member.id}</h5>\r\n        //             <h5 className=\"card-title\">{member.first_name}</h5>\r\n        //             <h5 className=\"card-title\">{member.last_name}</h5>\r\n        //             {/* kita juga mengirimkan props.editButtonClick dan props.deleteButtonClick \r\n        //             ke dalam component Members sebagai event handler tombol edit dan delete. */}\r\n        //             <button\r\n        //                 className=\"btn btn-primary\"\r\n        //                 onClick={() => props.editButtonClick(member)}\r\n        //             >Edit</button>\r\n        //             <button\r\n        //                 className=\"btn btn-danger\"\r\n        //                 onClick={() => props.deleteButtonClick(member.id)}\r\n        //             >Delete</button>\r\n        //         </div>\r\n        //     </div>\r\n        // </div>\r\n        <Member\r\n            member={member}\r\n            editButtonClick={(member) => props.editButtonClick(member)}\r\n            deleteButtonClick={(id) => props.deleteButtonClick(id)}\r\n        />\r\n    ))\r\n)\r\n\r\nexport default members","import React from 'react'\r\n\r\nconst form = (props) => (\r\n    <form onSubmit={props.onSubmitForm}>\r\n        <div className=\"form-group\">\r\n            <label>First Name</label>\r\n            <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                name=\"first_name\"\r\n                value={props.first_name}\r\n                onChange={props.onChange}\r\n            />\r\n            <div className=\"form-group\">\r\n                <label>Last Name</label>\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    name=\"last_name\"\r\n                    value={props.last_name}\r\n                    onChange={props.onChange}\r\n                />\r\n            </div>\r\n            <button\r\n                type=\"submit\"\r\n                className=\"btn btn-primary\"\r\n                disabled={props.buttonDisabled}\r\n            >Submit</button>\r\n        </div>\r\n    </form>\r\n)\r\n\r\nexport default form","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from \"axios\";\nimport Members from './components/Members/Members'\nimport Form from './components/Form/Form'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      members: [],\n      first_name: '',\n      last_name: '',\n      buttonDisabled: false,\n      formStatus: 'Create',\n      memberIdSelected: null,\n    }\n  }\n\n  componentDidMount() {\n    axios.get('https://reqres.in/api/users?page=1')\n      .then(response => {\n        this.setState({ members: response.data.data })\n      })\n      .catch(error => {\n        console.log(error)\n      })\n  }\n\n  inputOnChangeHandler = event => {\n    this.setState({ [event.target.name]: event.target.value })\n  }\n\n  onSubmitHandler = event => {\n    console.log(\"Form telah disubmit\")\n    event.preventDefault()\n    this.setState({ buttonDisabled: true });\n    var payload = {\n      first_name: this.state.first_name,\n      last_name: this.state.last_name\n    };\n\n    var url = \"https://reqres.in/api/users\"\n    if (this.state.formStatus == 'Create') {\n        this.addMember(url, payload)\n    } else {\n        url = 'https://reqres.in/api/users/${this.state.memberIdSelected}'\n        this.editMember(url, payload)\n    }\n  };\n\n  addMember = (url,payload) => {\n    axios.post(url, payload)\n      .then(response => {\n        console.log(response);\n        var members = [...this.state.members];\n        members.push(response.data);\n        this.setState({ members, buttonDisabled: false, first_name: '', last_name: '' })\n      })\n      .catch(error => {\n        console.log(error);\n      });\n    }\n\n    // Penjelasan dari kode di dibawah adalah, ketika kita mendapatkan response sukses dari server,\n    // maka kita akan meng-edit juga data member yang ada di state kita. Pertama, kita copy state member \n    // dan kita cari member yang akan kita edit berada di index berapa. Setelah mendapatkan index nya, \n    // maka kita ubah property first_name dan last_name nya. Berikutnya, kita lakukan setState untuk \n    // merubah data di state.\n    editMember = (url, payload) => {\n      axios.put(url, payload)\n        .then(response => {\n          var members = [...this.state.members]\n          var indexMember = members.findIndex(member => member.id === this.state.memberIdSelected)\n\n          // mengganti data yang ada dalam state members dan index yang sesuai\n          members[indexMember].first_name = response.data.first_name\n          members[indexMember].last_name = response.data.last_name\n          this.setState({\n            members,\n            buttonDisabled: false,\n            first_name: '',\n            last_name: '',\n            formStatus: 'Create',\n          })\n        })\n        .catch(error => {\n          console.log(error);\n        })  \n    };\n\n  // Kita gunakan object member untuk merubah state form input,\n  // dan kita juga akan menyimpan id member pada state memberId\n  editButtonHandler = (member) => {\n    this.setState( {\n      first_name : member.first_name,\n      last_name : member.last_name,\n      formStatus : 'Edit',\n      memberIdSelected : member.id,\n    })\n  }\n\n  deleteButtonHandler = (id) => {\n    var url = 'https://reqres.in/api/users/$(id)';\n    axios.delete(url)\n      .then(response => {\n        if(response.status === 204) {\n          var members = [...this.state.members]\n          var index = members.findIndex(member => member.id === id)\n          members.splice(index, 1)\n          this.setState({ members })\n        }\n      })\n      .catch(error => {\n        console.log(error)\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>Codepolitan DevSchool</h1>\n        <div className=\"row\">\n          <div className=\"col-md-6\" style={{ border: '1px solid black' }}>\n            <h2>Member</h2>\n            <div className=\"row\">\n              {/* kita gunakan component Members di dalam jsx, serta mengirimkan props yang diperlukan */}\n                <Members \n                    members={this.state.members}\n                    editButtonClick={(member) => this.editButtonHandler(member)}\n                    deleteButtonClick={(id) => this.deleteButtonHandler(id)}\n                />\n            </div>\n          </div>\n          \n          <div className=\"col-md-6\" style={{ border: '1px solid black' }}>\n            <h2>Form {this.state.formStatus}</h2>\n            {/* kita akan memisahkan form yang ada di App.js menjadi component terpisah ke file Form.js*/}\n            {/* <form onSubmit={this.onSubmitHandler}>\n              <div className=\"form-group\">\n                <label>First Name</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  name=\"first_name\"\n                  value={this.state.first_name}\n                  onChange={this.inputOnChangeHandler}\n                />\n                <div className=\"form-group\">\n                  <label>Last Name</label>\n                  <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    name=\"last_name\"\n                    value={this.state.last_name}\n                    onChange={this.inputOnChangeHandler}\n                  />\n                </div>\n                <button\n                  type=\"submit\"\n                  className=\"btn btn-primary\"\n                  disabled={this.state.buttonDisabled}\n                >Submit</button>\n              </div>\n            </form> */}\n            <Form\n                onSubmitForm={this.onSubmitHandler}\n                onChange={this.inputOnChangeHandler}\n                first_name={this.state.first_name}\n                last_name={this.state.last_name}\n                buttonDisabled={this.state.buttonDisabled}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}